/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package generators

import (
	"fmt"
	"go/ast"
	"io"
	"path/filepath"
	"strings"

	"github.com/gardener/gardener/cmd/flow-viz-gen/args"
	"github.com/gardener/gardener/cmd/flow-viz-gen/parser"

	"k8s.io/gengo/generator"
	"k8s.io/gengo/namer"
	"k8s.io/gengo/types"
	"k8s.io/klog/v2"
)

// These are the comment tags that carry parameters for defaulter generation.
const (
	dotFileType = "dot"
	tagName     = "gardener:flow-viz-gen"
)

func extractTag(comments []string) []string {
	return types.ExtractCommentTags("+", comments)[tagName]
}

func checkTag(comments []string) bool {
	values := types.ExtractCommentTags("+", comments)[tagName]
	return len(values) == 1 && values[0] != ""
}

// NameSystems returns the name system used by the generators in this package.
func NameSystems() namer.NameSystems {
	return namer.NameSystems{
		"public": namer.NewPublicNamer(1),
		"raw":    namer.NewRawNamer("", nil),
	}
}

// DefaultNameSystem returns the default name system for ordering the types to be
// processed by the generators in this package.
func DefaultNameSystem() string {
	return "public"
}

func NewDotFileType() *generator.DefaultFileType {
	return &generator.DefaultFileType{
		Format:   formatDot,
		Assemble: assembleDot,
	}
}

func formatDot(bytes []byte) ([]byte, error) {
	return bytes, nil
}

func assembleDot(w io.Writer, file *generator.File) {
	if _, err := file.Body.WriteTo(w); err != nil {
		panic(fmt.Errorf("failed to assemble dot %v", err))
	}
}

// flowFunc defines a func for which a flow visualization should be generated
type flowFunc struct {
	function *types.Type
	name     string
}

func Packages(context *Context, arguments *args.GeneratorArgs) generator.Packages {
	packages := generator.Packages{}

	context.FileTypes[dotFileType] = NewDotFileType()

	for _, i := range context.Inputs {
		klog.V(5).Infof("considering pkg %q", i)
		pkg := context.Universe[i]
		if pkg == nil {
			// If the input had no Go files, for example.
			continue
		}

		var flowFuncs []flowFunc

		for fnName, fnType := range pkg.Functions {
			tags := extractTag(fnType.CommentLines)
			if len(tags) == 0 {
				continue
			}

			klog.V(5).Infof("found function %q with %q tag", fnName, tagName)
			if len(tags) > 1 {
				panic(fmt.Sprintf("there can only be exactly one %q tag for each func, got %#v for %q", tagName, tags, fnName))
			}
			if tags[0] == "" {
				panic(fmt.Sprintf("flow name cannot be empty, found empty %q tag for function %q", tagName, fnName))
			}

			flowName := strings.Trim(tags[0], "\"")
			klog.V(5).Infof("found flow name %q for function %q", flowName, fnName)

			flowFuncs = append(flowFuncs, flowFunc{
				function: fnType,
				name:     flowName,
			})
		}

		packages = append(packages,
			&generator.DefaultPackage{
				PackageName: filepath.Base(pkg.Path),
				PackagePath: pkg.Path,
				GeneratorFunc: func(c *generator.Context) []generator.Generator {
					var generators []generator.Generator
					for _, ff := range flowFuncs {
						generators = append(generators, NewGenFlowViz(ff.function, ff.name, b))
					}

					return generators
				},
				FilterFunc: func(c *generator.Context, t *types.Type) bool {
					return t.Name.Package == pkg.Path
				},
			})
	}
	return packages
}

func sanitizeFlowName(name string) string {
	return strings.ReplaceAll(strings.ToLower(name), " ", "_")
}

// genFlowViz produces a file with a autogenerated conversions.
type genFlowViz struct {
	generator.DefaultGen
	builder  *parser.Builder
	name     string
	filename string
	function *types.Type
}

func NewGenFlowViz(function *types.Type, name string, builder *parser.Builder) generator.Generator {
	filename := sanitizeFlowName(name)
	return &genFlowViz{
		DefaultGen: generator.DefaultGen{
			OptionalName: filename,
		},
		builder:  builder,
		name:     name,
		filename: filename,
		function: function,
	}
}

func (g *genFlowViz) Filename() string {
	return g.filename + ".dot"
}

func (g *genFlowViz) FileType() string {
	return dotFileType
}

func (g *genFlowViz) Filter(c *generator.Context, t *types.Type) bool {
	return checkTag(t.CommentLines)
}

func (g *genFlowViz) GenerateType(c *generator.Context, t *types.Type, w io.Writer) error {
	klog.V(5).Infof("generating flow with name %q for function %v", g.name, t)

	if astNode, err := findFuncAstNode(c, t, g.builder); err != nil {
		return fmt.Errorf("failed to find corresponding ast node for function")
	}

	sw := generator.NewSnippetWriter(w, c, "$", "$")
	sw.Do("flow $.name$ for function $.function|raw$", map[string]interface{}{
		"name":     g.name,
		"function": g.function,
	})
	return sw.Error()
}

func findFuncAstNode(c *generator.Context, t *types.Type, b *parser.Builder) (ast.Node, error) {
	for _, pkg := range b.FindPackages() {

	}
}
