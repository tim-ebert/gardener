/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package generators

import (
	"fmt"
	"go/ast"
	"go/token"
	"io"
	"strings"

	"github.com/gardener/gardener/hack/flow-reference/flow-viz-gen/args"
	generator2 "github.com/gardener/gardener/hack/flow-reference/flow-viz-gen/generator"
	"github.com/gardener/gardener/hack/flow-reference/flow-viz-gen/visitor"

	"k8s.io/gengo/generator"
	"k8s.io/gengo/types"
	"k8s.io/klog/v2"
)

// These are the comment tags that carry parameters for defaulter generation.
const (
	dotFileType = "dot"
	tagName     = "gardener:flow-viz-gen"
)

func extractComments(cg *ast.CommentGroup) []string {
	if cg == nil {
		return []string{}
	}

	var comments []string
	for _, c := range cg.List {
		text := c.Text
		if strings.HasPrefix(text, "//") {
			text = strings.TrimPrefix(text, "//")
		}
		comments = append(comments, text)
	}
	return comments
}

func extractTag(comments []string) []string {
	return types.ExtractCommentTags("+", comments)[tagName]
}

func checkTag(comments []string) bool {
	values := types.ExtractCommentTags("+", comments)[tagName]
	return len(values) == 1 && values[0] != ""
}

func NewDotFileType() *generator.DefaultFileType {
	return &generator.DefaultFileType{
		Format:   formatDot,
		Assemble: assembleDot,
	}
}

func formatDot(bytes []byte) ([]byte, error) {
	return bytes, nil
}

func assembleDot(w io.Writer, file *generator.File) {
	if _, err := file.Body.WriteTo(w); err != nil {
		panic(fmt.Errorf("failed to assemble dot %v", err))
	}
}

// flowFunc defines a func for which a flow visualization should be generated
type flowFunc struct {
	funcDel *ast.FuncDecl
	name    string
}

func GetPackages(context *generator2.Context, a *args.GeneratorArgs) generator2.Packages {
	packages := generator2.Packages{}

	context.FileTypes[dotFileType] = NewDotFileType()

	for _, i := range context.Inputs {
		klog.V(5).Infof("considering pkg %q", i)
		pkg := context.Builder.GetBuildPackage(i)
		if pkg == nil {
			// If the input had no Go files, for example.
			continue
		}
		pkgFuncs := context.Funcs[pkg.ImportPath]

		flowFuncs := map[string]flowFunc{}

		for _, funcDecl := range pkgFuncs {
			funcName := funcDecl.Name.Name
			tags := extractTag(extractComments(funcDecl.Doc))
			if len(tags) == 0 {
				continue
			}

			flowName := ""

			klog.V(5).Infof("found function %q with %q tag", funcName, tagName)
			if len(tags) > 1 {
				panic(fmt.Sprintf("there can only be exactly one %q tag for each func, got %#v for %q", tagName, tags, funcName))
			}
			if tags[0] == "" {
				//panic(fmt.Sprintf("flow name cannot be empty, found empty %q tag for function %q", tagName, funcName))
			} else {
				flowName = strings.Trim(tags[0], "\"")
				klog.V(5).Infof("found flow name %q for function %q", flowName, funcName)
			}

			flowFuncs[funcName] = flowFunc{
				funcDel: funcDecl,
				name:    flowName,
			}
		}

		packages = append(packages,
			&generator2.DefaultPackage{
				PackageName: pkg.ImportPath,
				PackagePath: "",
				GeneratorFunc: func(c *generator2.Context) []generator2.Generator {
					var generators []generator2.Generator
					for _, ff := range flowFuncs {
						generators = append(generators, NewGenFlowViz(ff.funcDel, ff.name, a.OutputSuffix, c.Builder.FileSet))
					}

					return generators
				},
				FilterFunc: func(ctxt *generator2.Context, funcName string) bool {
					_, ok := flowFuncs[funcName]
					return ok
				},
			})
	}
	return packages
}

func sanitizeFlowName(name string) string {
	return strings.ReplaceAll(strings.ToLower(name), " ", "_")
}

// genFlowViz produces a file with a autogenerated conversions.
type genFlowViz struct {
	generator2.DefaultGen
	name     string
	suffix   string
	funcDecl *ast.FuncDecl
	fset     *token.FileSet
}

func NewGenFlowViz(funcDecl *ast.FuncDecl, name, suffix string, fset *token.FileSet) generator2.Generator {
	return &genFlowViz{
		DefaultGen: generator2.DefaultGen{},
		name:       name,
		funcDecl:   funcDecl,
		suffix:     suffix,
	}
}

func (g *genFlowViz) Filename() string {
	filename := sanitizeFlowName(g.name) + g.suffix
	return filename + ".dot"
}

func (g *genFlowViz) FileType() string {
	return dotFileType
}

func (g *genFlowViz) Finalize(_ *generator2.Context, _ io.Writer, f *generator.File) error {
	f.Name = g.Filename()

	return nil
}

func (g *genFlowViz) Filter(_ *generator2.Context, t *types.Type) bool {
	return checkTag(t.CommentLines)
}

func (g *genFlowViz) GenerateFunc(_ *generator2.Context, funcDecl *ast.FuncDecl, w io.Writer) error {
	funcName := funcDecl.Name.Name
	klog.V(5).Infof("generating flow with name %q for function %v", g.name, funcName)

	_, _ = fmt.Fprintf(w, "flow %q for function %q", g.name, funcName)

	funcVisitor := visitor.NewFuncVisitor(funcName, g.fset)
	ast.Walk(funcVisitor, funcDecl)
	if !funcVisitor.GraphFound {
		return fmt.Errorf("could not find flow definition in function %q", funcName)
	}

	if funcVisitor.GraphName != "" {
		g.name = funcVisitor.GraphName
	}

	klog.V(5).Infof("found flow graph definition in function %q with name %q", funcName, funcVisitor.GraphName)

	for _, task := range funcVisitor.Tasks {
		klog.V(5).Infof("found flow task with name %q with dependencies on: %s", task.Name, strings.Join(task.Dependencies, ", "))
	}

	return nil
}
