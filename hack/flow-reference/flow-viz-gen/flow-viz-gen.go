/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"fmt"
	"go/ast"
	"io"
	"strings"

	gengogenerator "k8s.io/gengo/generator"
	"k8s.io/gengo/namer"
	"k8s.io/gengo/types"
	"k8s.io/klog/v2"

	"github.com/gardener/gardener/hack/flow-reference/flow-viz-gen/args"
	"github.com/gardener/gardener/hack/flow-reference/flow-viz-gen/generator"
)

// These are the comment tags that carry parameters for defaulter generation.
const (
	dotFileType = "dot"
	tagName     = "gardener:flow-viz-gen"
)

func extractComments(cg *ast.CommentGroup) []string {
	if cg == nil {
		return []string{}
	}

	var comments []string
	for _, c := range cg.List {
		text := c.Text
		if strings.HasPrefix(text, "//") {
			text = strings.TrimPrefix(text, "//")
		}
		comments = append(comments, text)
	}
	return comments
}

func extractTag(comments []string) []string {
	return types.ExtractCommentTags("+", comments)[tagName]
}

func checkTag(comments []string) bool {
	values := types.ExtractCommentTags("+", comments)[tagName]
	return len(values) == 1 && values[0] != ""
}

// NameSystems returns the name system used by the generators in this package.
func NameSystems() namer.NameSystems {
	return namer.NameSystems{
		"public": namer.NewPublicNamer(1),
		"raw":    namer.NewRawNamer("", nil),
	}
}

// DefaultNameSystem returns the default name system for ordering the types to be
// processed by the generators in this package.
func DefaultNameSystem() string {
	return "public"
}

func NewDotFileType() *gengogenerator.DefaultFileType {
	return &gengogenerator.DefaultFileType{
		Format:   formatDot,
		Assemble: assembleDot,
	}
}

func formatDot(bytes []byte) ([]byte, error) {
	return bytes, nil
}

func assembleDot(w io.Writer, file *gengogenerator.File) {
	if _, err := file.Body.WriteTo(w); err != nil {
		panic(fmt.Errorf("failed to assemble dot %v", err))
	}
}

// flowFunc defines a func for which a flow visualization should be generated
type flowFunc struct {
	funcDel *ast.FuncDecl
	name    string
}

func Packages(context *generator.Context, a *args.GeneratorArgs) generator.Packages {
	packages := generator.Packages{}

	context.FileTypes[dotFileType] = NewDotFileType()

	for _, i := range context.Inputs {
		klog.V(5).Infof("considering pkg %q", i)
		pkg := context.Builder.GetBuildPackage(i)
		if pkg == nil {
			// If the input had no Go files, for example.
			continue
		}
		pkgFuncs := context.Funcs[pkg.ImportPath]

		flowFuncs := map[string]flowFunc{}

		for _, funcDecl := range pkgFuncs {
			funcName := funcDecl.Name.Name
			tags := extractTag(extractComments(funcDecl.Doc))
			if len(tags) == 0 {
				continue
			}

			klog.V(5).Infof("found function %q with %q tag", funcName, tagName)
			if len(tags) > 1 {
				panic(fmt.Sprintf("there can only be exactly one %q tag for each func, got %#v for %q", tagName, tags, funcName))
			}
			if tags[0] == "" {
				panic(fmt.Sprintf("flow name cannot be empty, found empty %q tag for function %q", tagName, funcName))
			}

			flowName := strings.Trim(tags[0], "\"")
			klog.V(5).Infof("found flow name %q for function %q", flowName, funcName)

			flowFuncs[funcName] = flowFunc{
				funcDel: funcDecl,
				name:    flowName,
			}
		}

		packages = append(packages,
			&generator.DefaultPackage{
				PackageName: pkg.ImportPath,
				PackagePath: "",
				GeneratorFunc: func(c *generator.Context) []generator.Generator {
					var generators []generator.Generator
					for _, ff := range flowFuncs {
						generators = append(generators, NewGenFlowViz(ff.funcDel, ff.name, a.OutputSuffix))
					}

					return generators
				},
				FilterFunc: func(ctxt *generator.Context, funcName string) bool {
					_, ok := flowFuncs[funcName]
					return ok
				},
			})
	}
	return packages
}

func sanitizeFlowName(name string) string {
	return strings.ReplaceAll(strings.ToLower(name), " ", "_")
}

// genFlowViz produces a file with a autogenerated conversions.
type genFlowViz struct {
	generator.DefaultGen
	name     string
	filename string
	funcDecl *ast.FuncDecl
}

func NewGenFlowViz(funcDecl *ast.FuncDecl, name, suffix string) generator.Generator {
	filename := sanitizeFlowName(name) + suffix
	return &genFlowViz{
		DefaultGen: generator.DefaultGen{
			OptionalName: filename,
		},
		name:     name,
		filename: filename,
		funcDecl: funcDecl,
	}
}

func (g *genFlowViz) Filename() string {
	return g.filename + ".dot"
}

func (g *genFlowViz) FileType() string {
	return dotFileType
}

func (g *genFlowViz) Filter(c *generator.Context, t *types.Type) bool {
	return checkTag(t.CommentLines)
}

func (g *genFlowViz) GenerateFunc(c *generator.Context, funcDecl *ast.FuncDecl, w io.Writer) error {
	klog.V(5).Infof("generating flow with name %q for function %v", g.name, funcDecl.Name.Name)

	_, _ = fmt.Fprintf(w, "flow %q for function %q", g.name, funcDecl.Name.Name)

	visitor := &funcVisitor{}

	ast.Walk(visitor, funcDecl)

	if !visitor.graphFound {
		return fmt.Errorf("could not find flow definition in function %q", g.name)
	}

	return nil
}

var _ = ast.Visitor(&funcVisitor{})

type funcVisitor struct {
	graphFound  bool
	graphObject ast.Object
	graphNodes  []*graphNode
}

type graphNode struct {
	name string
	deps []*graphNode
}

func (f *funcVisitor) Visit(node ast.Node) (w ast.Visitor) {
	// business logic

	return nil
}
